// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//
//  PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
//  ---------------------------------------------------
//  Indrek Paas @indrekpaas
//
//  Inspired by Mike Riethmuller's Precise control over responsive typography
//  http://madebymike.com.au/writing/precise-control-responsive-typography/
//
//  Borrowed `strip-unit` function from Hugo Giraudel
//  https://css-tricks.com/snippets/sass/strip-unit-function/
//
//  02.04.2018 Remove `screen` keyword from media queries
//  11.08.2016 Remove redundant `&` self-reference
//  31.03.2016 Remove redundant parenthesis from output
//  02.10.2015 Add support for multiple properties
//  24.04.2015 Initial release
//
// -----------------------------------------------------------------------------

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(
        #{$min-value} +
          #{strip-unit($max-value - $min-value)} *
          (100vw - #{$min-vw}) /
          #{strip-unit($max-vw - $min-vw)}
      );
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// -----------------------------------------------------------------------------

// Small-caps
@mixin sm-caps {
  text-transform: lowercase;
  font-variant: small-caps;
}

// -----------------------------------------------------------------------------

// Automatically add rem font-size

// Define default font size
@function calculateRem($size) {
  $remSize: $size / 10px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

//Usage
// p {
// @include font-size(14px)
// }

//Output
// p {
// font-size: 14px; //For unsupported browsers
// font-size: 0.8rem;
// }

// -----------------------------------------------------------------------------

// Breakpoints

// Only need to be fussy about these up to 40rem – the max-width for the container

@mixin bp-360 {
  @media only screen and (min-width: 360px) {
    @content;
  }
}

@mixin bp-375 {
  @media only screen and (min-width: 375px) {
    @content;
  }
}

@mixin bp-411 {
  @media only screen and (min-width: 411px) {
    @content;
  }
}

// -----------------------------------------------------------------------------

// Event wrapper
// @author Harry Roberts
// @param {Bool} $self [false] - Whether or not to include current selector
// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

// -----------------------------------------------------------------------------

// Make a context based selector a little more friendly
// @author Hugo Giraudel
// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

// -----------------------------------------------------------------------------

@mixin list-arrow {
  display: inline-block;
  content: "";
  background: url("../img/svg/arrow-right.svg") no-repeat;
  background-size: 2rem 2rem;
  width: 2rem; // same dims as bg size
  height: 2rem; // same dims as bg size
  vertical-align: middle;
  margin-left: 0.5rem;
  opacity: 0.4;
}

@mixin roots-bg {
  content: "";
  background-repeat: no-repeat;
  background-position: right center;
  background-size: 2.5rem 2.5rem;
  background-blend-mode: darken;
  background-color: transparent;
  width: 2.5rem; // same dims as bg size
  height: 2.5rem; // same dims as bg size
  vertical-align: middle;
  position: absolute;
  top: 50%;
  right: 0;
  transform: translateY(-50%);
}
